#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2015 - 2016  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current status of the SNTP client
# on Dell PowerConnect switches. This has currently been verified to work
# with the following Broadcom FastPath silicon based switch models:
#   PowerConnect M8024-k
#   PowerConnect M6348 
#
# Warning and critical threshold values for the number of SNTP server
# connections that have to be in the status "success", can be passed to
# the check script with the:
#   dell_powerconnect_bcm_sntp_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   FASTPATH-SNTP-CLIENT-MIB::agentSntpClientLastAttemptStatus.0                                .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.1.7.0
#   FASTPATH-SNTP-CLIENT-MIB::agentSntpClientUcastServerAddress.<IDX>                           .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.3.<IDX>
#   FASTPATH-SNTP-CLIENT-MIB::agentSntpClientUcastServerLastAttemptStatus.<IDX>                 .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.9.<IDX>
#   FASTPATH-SNTP-CLIENT-MIB::agentSntpClientUcastServerNumRequests.<IDX>                       .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.10.<IDX>
#   FASTPATH-SNTP-CLIENT-MIB::agentSntpClientUcastServerNumFailedRequests.<IDX>                 .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.11.<IDX>
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.1.7.0 = INTEGER: success(2)
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.3.1 = STRING: "<FQDN>"
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.9.1 = INTEGER: success(2)
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.10.1 = Counter32: 17789
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1.11.1 = Counter32: 5
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.#
#

# Default warning and critical values
factory_settings["dell_powerconnect_bcm_sntp_default_levels"] = {
    "levels": (1, 0)
}

# SNTP connection status map
dell_powerconnect_bcm_sntp_status_map = {
    1: 'other',
    2: 'success',
    3: 'requestTimedOut',
    4: 'badDateEncoded',
    5: 'versionNotSupported',
    6: 'serverUnsychronized',
    7: 'serverKissOfDeath',
}

# The inventory function
def inventory_dell_powerconnect_bcm_sntp(checkname,info):
    # info[0] contains the global status value of the SNTP client
    # info[1] contains the per server status of the SNTP client
    if len(info) != 2:
        return
    return [ ( None, "dell_powerconnect_bcm_sntp_default_levels" ) ]

# The check function
def check_dell_powerconnect_bcm_sntp(unit, params, info):
    # info[0] contains the global status value of the SNTP client
    # info[1] contains the per server status of the SNTP client
    if len(info) != 2:
        return

    # Initialize some variables
    output = ''
    output_servers = []
    perfdata = []
    rc = 0
    num_bad_servers = 0
    num_total_servers = 0
    status = {0: 'OK', 1: 'WARNING', 2: 'CRITICAL', 3: 'UNKNOWN'}

    # Get the warning and critical threshold values for this unit
    warn, crit = params['levels']
    warn = int(warn)
    crit = int(crit)

    # Get and check the global status of the SNTP client
    status_global = int(list(info[0][0])[0])

    if status_global != 2:
        rc = 2
        status_global_info = '(!!)'

    # If the returned number of results seems plausible
    if (len(info[1]) >= 1):
        # Iterate over all SNTP servers that were configured
        for server in info[1]:
            # Initialize some variables
            dell_powerconnect_bcm_sntp_status = ''
            server_info = ''
            server_name, server_status, server_req_total, server_req_failed = server

            # Lookup the status string in the map defined above
            dell_powerconnect_bcm_sntp_status = dell_powerconnect_bcm_sntp_status_map[int(server_status)]

            # Check the server status value and increment counter if not "success"
            num_total_servers += 1
            if int(server_status) != 2:
                num_bad_servers += 1
                server_info = '(!!)'

            # Build output string and performance data array
            output_servers.append('NTP server %s connection status \"%s\"%s' % (server_name, dell_powerconnect_bcm_sntp_status, server_info))
            perfdata.append( ( 'req_total__' + server_name.replace('.', '_'), server_req_total + 'c' ) )
            perfdata.append( ( 'req_failed__' + server_name.replace('.', '_'), server_req_failed + 'c' ) )

        # Check the total number of connections to SNTP servers with the status "success"
        # against the warning and critical threshold values. The edge case of only one
        # configured SNTP server is covered by effectively disabling the warning state and
        # directly going into the critical state
        if (num_total_servers > crit and (num_total_servers - num_bad_servers) <= crit):
            rc = 2
        elif (num_total_servers > warn and (num_total_servers - num_bad_servers) <= warn):
            rc = 1

        # Combine all output information into on string
        output = status[rc] + ' - ' + ', '.join(output_servers)
    else:
        rc = 3
        output = status[rc] + " - No or invalid data retrieved: %s" % info

    # Return the final status and output string
    return (rc, output, perfdata)

# Declaration of the check for Check_MK
check_info['dell_powerconnect_bcm_sntp'] = {
    'check_function'          : check_dell_powerconnect_bcm_sntp,
    'inventory_function'      : inventory_dell_powerconnect_bcm_sntp,
    'service_description'     : "Dell PowerConnect Broadcom SNTP",
    'snmp_info'               : [
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.1", [ "7" ] ),   # agentSntpClientLastAttemptStatus
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.6.1", [
            "3",    # agentSntpClientUcastServerAddress
            "9",    # agentSntpClientUcastServerLastAttemptStatus
            "10",   # agentSntpClientUcastServerNumRequests
            "11",   # agentSntpClientUcastServerNumFailedRequests
        ]),
    ],
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895") and oid(".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.17.1.2.5.0") > 0,
    'has_perfdata'            : True,
    'default_levels_variable' : 'dell_powerconnect_bcm_sntp_default_levels',
    'group'                   : 'dell_powerconnect_bcm_sntp',
}

#
# EOF
