#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2015 - 2016  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current memory usage of Dell
# PowerConnect switches. This has currently been verified to work with
# the following Broadcom FastPath silicon based switch models:
#   PowerConnect M8024-k
#   PowerConnect M6348 
#
# Warning and critical threshold values in KBytes can be passed to the
# check script with the:
#   dell_powerconnect_mem_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   FASTPATH-SWITCHING-MIB::agentSwitchCpuProcessMemFree.0        .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.1.0
#   FASTPATH-SWITCHING-MIB::agentSwitchCpuProcessMemAvailable.0   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.2.0
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.1.0 = INTEGER: 167590 KBytes
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.2.0 = INTEGER: 524288 KBytes
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.#
#

# Default warning and critical values
factory_settings["dell_powerconnect_mem_default_levels"] = {
    "levels": (51200, 25600)
}

# The inventory function
def inventory_dell_powerconnect_memory(checkname,info):
    print info
    if (len(info[0]) >= 2):
        return [ ( None, "dell_powerconnect_mem_default_levels" ) ]

# The check function
def check_dell_powerconnect_memory(checktype, params, info):
    warn, crit = params['levels']
    warn = int(warn)
    crit = int(crit)
    output = ''
    perfdata = []
    rc = 0
    status = {0: 'OK', 1: 'WARNING', 2: 'CRITICAL', 3: 'UNKNOWN'}

    # If the returned number of results seems plausible
    if (len(info[0]) >= 2):
        # Build output string and performance data array
        output = " -  Memory free: %s KByte, Memory total: %s KByte" % (info[0][0], info[0][1])
        perfdata = [ ( "mem_free", info[0][0] , warn, crit ), ( "mem_total", info[0][1] ) ]

        # Check values against thresholds
        value = int(info[0][0])
        if (value <= crit):
            rc = 2
        elif (value <= warn):
            rc = 1

        # Build final output string based on the Nagios return code
        output = status[rc] + output
    else:
        rc = 3
        output = status[rc] + " - No or invalid data retrieved: %s" % info

    # Return the final status and output string
    return (rc, output, perfdata)

# Declaration of the check for Check_MK
check_info['dell_powerconnect_memory'] = {
    'check_function'          : check_dell_powerconnect_memory,
    'inventory_function'      : inventory_dell_powerconnect_memory,
    'service_description'     : "PowerConnect Memory",
    'snmp_info'               : ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1", [ '4.1.0', '4.2.0' ] ),
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895") and oid(".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.1.0") != None,
    'has_perfdata'            : True,
    'default_levels_variable' : 'dell_powerconnect_mem_default_levels',
}

#
# EOF
