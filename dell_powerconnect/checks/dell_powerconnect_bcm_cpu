#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2015 - 2016  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current total cpu usage of Dell
# PowerConnect switches. This has currently been verified to work with
# the following Broadcom FastPath silicon based switch models:
#   PowerConnect M8024-k
#   PowerConnect M6348 
#
# Warning and critical threshold values in "%" for the overall CPU usage
# can be passed to the check script with the:
#   dell_powerconnect_bcm_cpu_all_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   FASTPATH-SWITCHING-MIB::agentSwitchCpuProcessTotalUtilization.0     .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.9.0
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.9.0 = STRING: "    5 Secs ( 40.28%)    60 Secs ( 41.03%)   300 Secs ( 38.24%) "
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.#
#

# Default warning and critical values
factory_settings["dell_powerconnect_bcm_cpu_all_default_levels"] = {
    "levels": (float(80.0), float(90.0))
}

# The inventory function
def inventory_dell_powerconnect_bcm_cpu(checkname,info):
    if (len(info[0]) >= 1):
        return [ ( None, "dell_powerconnect_bcm_cpu_all_default_levels" ) ]

# The check function
def check_dell_powerconnect_bcm_cpu(checktype, params, info):
    warn, crit = params['levels']
    warn = float(warn)
    crit = float(crit)
    output = ''
    perfdata = []
    rc = 0
    status = {0: 'OK', 1: 'WARNING', 2: 'CRITICAL', 3: 'UNKNOWN'}

    # If the returned number of results seems plausible
    if (len(info[0]) >= 1):
        # Clean up the string with reported CPU usage and split it into an array. The 3rd, 6th and 9th
        # fields of the array (index 2, 5 and 8) contain the relevant CPU usage values in "%"
        # Example:
        #   "    5 Secs ( 49.69%)    60 Secs ( 47.01%)   300 Secs ( 41.33%) "
        tinfo = info[0][0].replace('(', '')
        tinfo = tinfo.replace(')', '')
        tinfo = tinfo.split()

        # Build output string and performance data array
        output = " - Total CPU utilization -"
        perfdata = [ ( "cpu_total_5", tinfo[2], warn, crit ), ( "cpu_total_60", tinfo[5], warn, crit ), ( "cpu_total_300", tinfo[8], warn, crit ) ]

        # Iterate over all three CPU utilization values and check against thresholds
        for idx in [2, 5, 8]:
            value = float(tinfo[idx].replace('%', ''))
            output = output + ' ' + tinfo[idx-2] + 'sec: ' + tinfo[idx]
            if (value >= crit):
                output = output + ' (!!)'
                if (rc != 2):
                    rc = 2
            elif (value >= warn):
                output = output + ' (!)'
                if (rc == 0):
                    rc = 1

        # Combine all output information into on string
        output = status[rc] + output
    else:
        rc = 3
        output = status[rc] + " - No or invalid data retrieved: %s" % info

    # Return the final status and output string
    return (rc, output, perfdata)

# Declaration of the check for Check_MK
check_info['dell_powerconnect_bcm_cpu'] = {
    'check_function'          : check_dell_powerconnect_bcm_cpu,
    'inventory_function'      : inventory_dell_powerconnect_bcm_cpu,
    'service_description'     : "PowerConnect CPU",
    'snmp_info'               : ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.9", ["0"] ),
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895") and oid(".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.9.0") != None,
    'has_perfdata'            : True,
    'default_levels_variable' : 'dell_powerconnect_bcm_cpu_all_default_levels',
}

#
# EOF
