#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# This check extracts data from 1.3.6.1.2.1.16.1.1.1 =
# iso(1). org(3). dod(6). internet(1). mgmt(2). mib-2(1). rmon(16).
# statistics(1). etherStatsTable(1). etherStatsEntry(1)
# The MIB is called RMON-MIB


def inventory_rmon_stats(info):
    settings = host_extra_conf_merged(g_hostname, inventory_if_rules)
    if settings.get("rmon"):
        inventory = []
        for line in info[1]:
            rmon_if_idx = int(re.sub('.1.3.6.1.2.1.2.2.1.1.','',line[1]))
            for iface in info[0]:
                if int(iface[0]) == rmon_if_idx and int(iface[2]) == 1:
                    params = {}
                    params["rmon_if_idx"] = int(line[0])
                    inventory.append((iface[1], "%r" % params))
        return inventory

def check_rmon_stats(item, params, info):
    bytes = { 2: 'bcast', 3: 'mcast', 4: '0-63b', 5: '64-127b', 6: '128-255b', 7: '256-511b', 8: '512-1023b', 9: '1024-1518b' }
    rmon_if_idx = str(params.get("rmon_if_idx"))
    if_alias = ''
    infotext = ''
    perfdata = []
    now = time.time()

    for line in info[0]:
        ifIndex, ifDescr, ifOperStatus, ifAlias = line
        if item == ifDescr:
            if_alias = ifAlias
            if_index = int(ifIndex)

    for line in info[1]:
        if line[0] == rmon_if_idx:
            if_mib_idx = int(re.sub('.1.3.6.1.2.1.2.2.1.1.','',line[1]))
            if if_mib_idx != if_index:
                return (3, "RMON interface index mapping to IF interface index mapping changed. Re-run Check_MK inventory.")

            if item != if_alias and if_alias != '':
                infotext = "[%s, RMON: %s] " % (if_alias, rmon_if_idx)
            else:
                infotext = "[RMON: %s] " % rmon_if_idx

            for i, val in bytes.items():
                octets = int(re.sub(' Packets','',line[i]))
                rate = get_rate("%s-%s" % (rmon_if_idx, val), now, octets)
                perfdata.append((val, rate, 0, 0, 0))
                infotext += "%s=%.0f " % (val, rate)
            infotext += 'octets/sec'
            return 0, infotext, perfdata

    return (3, "port not found")

check_info["rmon_stats"] = {
    'check_function'        : check_rmon_stats,
    'inventory_function'    : inventory_rmon_stats,
    'service_description'   : 'RMON Interface %s',
    'has_perfdata'          : True,
    'snmp_info'             : [
        ( '.1.3.6.1.2.1', [ #
                                        '2.2.1.1',      # ifNumber
                                        '2.2.1.2',      # ifDescr
                                        '2.2.1.8',      # ifOperStatus
                                        '31.1.1.1.18',  # ifAlias
                          ]),
        ('.1.3.6.1.2.1.16.1.1.1', [ #
                                        '1',    # etherStatsIndex = Item
                                        '2',    # etherStatsDataSource = Interface in the RFC1213-MIB
                                        '6',    # etherStatsBroadcastPkts
                                        '7',    # etherStatsMulticastPkts
                                        '14',   # etherStatsPkts64Octets
                                        '15',   # etherStatsPkts65to127Octets
                                        '16',   # etherStatsPkts128to255Octets
                                        '17',   # etherStatsPkts256to511Octets
                                        '18',   # etherStatsPkts512to1023Octets
                                        '19',   # etherStatsPkts1024to1518Octets
                                  ]),
        ],
    # if at least one interface within the RMON tree is present (the previous
    # "netDefaultGateway" is not present in every device implementing the RMON
    # MIB
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.2.1.16.1.1.1.1.1") > 0,

}
