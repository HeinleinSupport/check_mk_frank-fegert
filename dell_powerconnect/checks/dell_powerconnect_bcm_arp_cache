#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2015 - 2016  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current number of entries in the
# ARP cache on Dell PowerConnect switches. This has currently been verified
# to work with the following Broadcom FastPath silicon based switch models:
#   PowerConnect M8024-k
#   PowerConnect M6348 
#
# Warning and critical threshold values for the number of entries in the
# ARP cache, can be passed to the check script with the:
#   dell_powerconnect_bcm_arp_cache_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   FASTPATH-ROUTING-MIB::agentSwitchArpCacheSize.0                     .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.4.0
#   FASTPATH-ROUTING-MIB::agentSwitchArpTotalEntryCountCurrent.0        .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.6.0
#   FASTPATH-ROUTING-MIB::agentSwitchArpTotalEntryCountPeak.0           .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.7.0
#   FASTPATH-ROUTING-MIB::agentSwitchArpStaticEntryCountCurrent.0       .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.8.0
#   FASTPATH-ROUTING-MIB::agentSwitchArpStaticEntryCountMax.0           .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.9.0
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.4.0 = INTEGER: 4096
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.6.0 = Gauge32: 0
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.7.0 = Gauge32: 0
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.8.0 = Gauge32: 0
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.9.0 = INTEGER: 128
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.#
#

factory_settings["dell_powerconnect_bcm_arp_cache_default_levels"] = {
    "levels": (3072, 3584)
}

# The inventory function
def inventory_dell_powerconnect_bcm_arp_cache(checkname,info):
    # info[0] contains the list of ARP cache values (size, current total entries,
    # max total entries, current static entries and max static entries)
    if len(info) != 1:
        return
    return [ ( None, "dell_powerconnect_bcm_arp_cache_default_levels" ) ]

# The check function
def check_dell_powerconnect_bcm_arp_cache(unit, params, info):
    # info[0] contains the list of ARP cache values (size, current total entries,
    # max total entries, current static entries and max static entries)
    if len(info) != 1:
        return

    # Initialize some variables
    output = ''
    perfdata = []
    rc = 0
    status = {0: 'OK', 1: 'WARNING', 2: 'CRITICAL', 3: 'UNKNOWN'}

    # Get the warning and critical threshold values for this unit
    warn, crit = params['levels']
    warn = int(warn)
    crit = int(crit)

    # If the returned number of results seems plausible
    if (len(info[0][0]) == 5):
        # Get the ARP cache values (size, current total entries,
        # max total entries, current static entries and max static entries)
        arp_cache_size     = int(list(info[0][0])[0])
        arp_current_total  = int(list(info[0][0])[1])
        arp_max_total      = int(list(info[0][0])[2])
        arp_current_static = int(list(info[0][0])[3])
        arp_max_static     = int(list(info[0][0])[4])

        # Check the total number of current ARP cache entries against the warning and critical threshold values.
        if (arp_current_total >= crit):
            rc = 2
        elif (arp_current_total >= warn):
            rc = 1

        # Build output string and performance data array
        output = status[rc] + " - Total number of current ARP cache entries: %s, Warning %s, Critical %s" % (arp_current_total, warn, crit)
        perfdata.append( ( 'arp_current_total', arp_current_total, warn, crit, 0, arp_cache_size ) )
        perfdata.append( ( 'arp_max_total', arp_max_total ) )
        perfdata.append( ( 'arp_current_static', arp_current_static ) )
        perfdata.append( ( 'arp_max_static', arp_max_static ) )
    else:
        rc = 3
        output = status[rc] + " - No or invalid data retrieved: %s" % info

    # Return the final status and output string
    return (rc, output, perfdata)

# Declaration of the check for Check_MK
check_info['dell_powerconnect_bcm_arp_cache'] = {
    'check_function'          : check_dell_powerconnect_bcm_arp_cache,
    'inventory_function'      : inventory_dell_powerconnect_bcm_arp_cache,
    'service_description'     : "Dell PowerConnect Broadcom ARP Cache",
    'snmp_info'               : [
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1", [
            "4",    # agentSwitchArpCacheSize
            "6",    # agentSwitchArpTotalEntryCountCurrent
            "7",    # agentSwitchArpTotalEntryCountPeak
            "8",    # agentSwitchArpStaticEntryCountCurrent
            "9",    # agentSwitchArpStaticEntryCountMax
        ]),
    ],
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895") and oid(".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.2.1.4.0") > 0,
    'has_perfdata'            : True,
    'default_levels_variable' : 'dell_powerconnect_bcm_arp_cache_default_levels',
    'group'                   : 'dell_powerconnect_bcm_arp_cache',
}

#
# EOF
