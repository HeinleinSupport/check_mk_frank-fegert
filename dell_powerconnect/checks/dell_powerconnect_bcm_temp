#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2015 - 2016  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current temperature of Dell
# PowerConnect switches. This has currently been verified to work with
# the following Broadcom FastPath silicon based switch models:
#   PowerConnect M8024-k
#   PowerConnect M6348 
#
# Warning and critical threshold values in degrees celsius for the
# temperature can be passed to the check script with the:
#   dell_powerconnect_bcm_temp_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesNormalTempRangeMin.0                           .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.1.0
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesNormalTempRangeMax.0                           .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.2.0
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesUnitIndex.<UNIT-IDX>.<SENSOR-IDX>              .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.1.<UNIT-IDX>.<SENSOR-IDX>
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesTempSensorIndex.<UNIT-IDX>.<SENSOR-IDX>        .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.2.<UNIT-IDX>.<SENSOR-IDX>
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesTempSensorState.<UNIT-IDX>.<SENSOR-IDX>        .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.4.<UNIT-IDX>.<SENSOR-IDX>
#   FASTPATH-BOXSERVICES-PRIVATE-MIB::boxServicesTempSensorTemperature.<UNIT-IDX>.<SENSOR-IDX>  .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.5.<UNIT-IDX>.<SENSOR-IDX>
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.1.0 = INTEGER: 0
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.2.0 = INTEGER: 85
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.1.1.0 = Gauge32: 1
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.2.1.0 = Gauge32: 0
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.4.1.0 = INTEGER: 1
#   .1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.5.1.0 = INTEGER: 40
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.#
#

# Default warning and critical values
factory_settings["dell_powerconnect_bcm_temp_default_levels"] = {
    "levels": (45, 50)
}

# Temperature status map
dell_powerconnect_bcm_temp_status_map = {
    0: 'low',
    1: 'normal',
    2: 'warning',
    3: 'critical',
    4: 'shutdown',
    5: 'notpresent',
    6: 'notoperational',
}

# The inventory function
def inventory_dell_powerconnect_bcm_temp(checkname,info):
    # info[0] contains the minimum value
    # info[1] contains the maximum value
    # info[2] contains the sensor table
    if len(info) != 3:
        return

    inventory = []
    if (len(info[2]) >= 1):
        for unit, sensor, state, temp in info[2]:
            inventory.append(('Unit ' + unit + ' Sensor ' + sensor, 'dell_powerconnect_bcm_temp_default_levels'))
    return inventory

# The check function
def check_dell_powerconnect_bcm_temp(unit, params, info):
    # info[0] contains the minimum value
    # info[1] contains the maximum value
    # info[2] contains the sensor table
    if len(info) != 3:
        return

    # Initialize some variables
    output = ''
    perfdata = []
    rc = 0
    status = {0: 'OK', 1: 'WARNING', 2: 'CRITICAL', 3: 'UNKNOWN'}

    # Get the warning and critical threshold values for this unit
    warn, crit = params['levels']
    warn = int(warn)
    crit = int(crit)

    # Get the min and max values from info[0] and info[1]
    value_min = int(list(info[0][0])[0])
    value_max = int(list(info[1][0])[0])

    # Get the unit and sensor numbers from the unit name
    _, unit_num, _, sensor_num = unit.split()

    # If the returned number of results seems plausible
    if (len(info[2]) >= 1):
        # Iterate over the values for all units and sensors that were found
        for item in info[2]:
            # Check if the set of values matches the current unit and sensor numers
            if (item[0] == unit_num and item[1] == sensor_num):
                sensor_info = ''
                temp_info = ''
                state = int(item[2])
                temp = int(item[3])

                # Lookup the status string in the map defined above
                dell_powerconnect_bcm_temp_status = dell_powerconnect_bcm_temp_status_map[state]

                # Check the sensors status value against the critical and warning status values
                if state == 3:
                    rc = 2
                    sensor_info = '(!!)'
                elif state == 2:
                    rc = 1
                    sensor_info = '(!)'

                # Check the sensors temperature value against the thresholds
                if temp >= crit:
                    rc = 2
                    temp_info = '(!!)'
                elif (temp >= warn and rc < 2):
                    rc = 1
                    temp_info = '(!)'

                # Build output string and performance data array
                output = ' - The temperature sensor %s in unit %s is currently in status \"%s\"%s at a temperature value of %s degC%s' % (sensor_num, unit_num, dell_powerconnect_bcm_temp_status, sensor_info, temp, temp_info)
                perfdata = [ ( 'temp_unit_' + unit_num + '_sensor_' + sensor_num, temp, warn, crit, value_min, value_max ) ]

                # Combine all output information into on string
                output = status[rc] + output
    else:
        rc = 3
        output = status[rc] + " - No or invalid data retrieved: %s" % info

    # Return the final status and output string
    return (rc, output, perfdata)

# Declaration of the check for Check_MK
check_info['dell_powerconnect_bcm_temp'] = {
    'check_function'          : check_dell_powerconnect_bcm_temp,
    'inventory_function'      : inventory_dell_powerconnect_bcm_temp,
    'service_description'     : "Dell PowerConnect Broadcom Temp",
    'snmp_info'               : [
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1", [ "1" ] ),    # boxServicesNormalTempRangeMin
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1", [ "2" ] ),    # boxServicesNormalTempRangeMax
        ( ".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1", [
            "1",    # boxServicesUnitIndex
            "2",    # boxServicesTempSensorIndex
            "4",    # boxServicesTempSensorState
            "5",    # boxServicesTempSensorTemperature
        ]),
    ],
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895") and oid(".1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1.5.1.0") > 0,
    'has_perfdata'            : True,
    'default_levels_variable' : 'dell_powerconnect_bcm_temp_default_levels',
    'group'                   : 'dell_powerconnect_bcm_temp',
}

#
# EOF
