#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2018  Frank Fegert (fra.nospam.nk@gmx.de)
#
# Check_MK check script to determine the current memory usage on
# Brocade Fibre Channel switches. This has currently been verified
# to work with the following Brocade Fibre Channel switch models and
# FabricOS versions:
#   Brocade G620 (v8.1.2a)
#
# Warning and critical threshold values in "%" for the overall memory
# usage can be passed to the check script with the:
#   brocade_mem_default_levels = {
#       'levels': (warning, critical)
#   }
# configuration option.
#
# List of the OIDs that are being used:
#   SW-MIB::swMemUsage.0    .1.3.6.1.4.1.1588.2.1.1.1.26.6.0
#
# Example output of an SNMP query on the OIDs that are being used:
#   .1.3.6.1.4.1.1588.2.1.1.1.26.6.0 = INTEGER: 17
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#

# Default warning and critical values
factory_settings["brocade_mem_default_levels"] = {
    "levels": ("perc_used", (80.0, 90.0))
}

# The inventory function
def inventory_brocade_mem(info):
    if len(info) >= 1:
        return [ (None, "brocade_mem_default_levels") ]

# The check function
def check_brocade_mem(item, params, info):
    output = ''
    perfdata = []
    status = 0

    # If the returned number of results seems plausible
    if (len(info[0]) >= 1):
        perc_used = float(info[0][0])
        output = "Memory usage: %s" % (get_percent_human_readable(perc_used))

        if params["levels"][0] == "perc_used":
            warn, crit = params["levels"][1]
            warn = float(warn)
            crit = float(crit)
            # Check values against thresholds
            if perc_used >= crit:
                status = 2
                output = output + " above critical level at %s." % get_percent_human_readable(crit)
            elif perc_used >= warn:
                status = 1
                output = output + " above warning level at %s." % get_percent_human_readable(warn)
        else:
            warn, crit = None, None

        # Build output string and performance data array
        perfdata = [ ("memory_used", perc_used, warn, crit, 0, 100) ]
    else:
        status = 3
        output = "No or invalid data retrieved: %s" % info

    return (status, output, perfdata)

# Declaration of the check for Check_MK
check_info['brocade_mem'] = {
    'inventory_function'        : inventory_brocade_mem,
    'check_function'            : check_brocade_mem,
    'service_description'       : 'Memory utilization',
    'has_perfdata'              : True,
    'snmp_info'                 : (".1.3.6.1.4.1.1588.2.1.1.1.26", [
                                    "6",    # swMemUsage
                                  ]),
    'snmp_scan_function'        : lambda oid: (oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1588") \
                                            or oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.24.1.1588.2.1.1")) \
                                              and oid(".1.3.6.1.4.1.1588.2.1.1.1.1.6.0") != None,
    'default_levels_variable'   : 'brocade_mem_default_levels',
    'group'                     : "brocade_mem",
}

#
# EOF
